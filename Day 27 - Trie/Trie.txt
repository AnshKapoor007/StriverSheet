/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */


struct Node {
    Node* links[26];
    bool isWord=false;

    bool containsWord(char ch) {
        return (links[ch-'a']!=NULL);
    }

    Node* get(char ch) {
        return links[ch-'a'];
    }

    void put(char ch, Node* node) {
        links[ch-'a']=node;
    }

    void markComplete() {
        isWord=true;
    }
};

class Trie {

public:

    Node* root;
    /** Initialize your data structure here. */
    Trie() {
        root=new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* node=root;
        for(char ch: word) {
            if(!node->containsWord(ch))
                node->put(ch, new Node());
            node=node->get(ch);
        }
        node->markComplete();
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* node=root;
        for(char ch: word) {
            if(node->containsWord(ch))
                node=node->get(ch);
            else return false;
        }
        return node->isWord;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* node=root;
        for(char ch: prefix) {
            if(node->containsWord(ch))
                node=node->get(ch);
            else return false;
        }
        return true;
    }
};