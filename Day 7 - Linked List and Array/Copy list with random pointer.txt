/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* itr=head;
        while(itr!=NULL) {
            Node* temp=new Node(itr->val);
            temp->next=itr->next;
            itr->next=temp;
            itr=itr->next->next;
        }//adding new copied nodes after each real node
        itr=head;
        while(itr!=NULL) {
            itr->next->random=itr->random!=NULL?itr->random->next:NULL;
            itr=itr->next->next;
        }//updating random pointer of the copy node
        Node* front;
        itr=head;
        Node* dummy=new Node(0);
        Node* itrDummy=dummy;
        while(itr!=NULL) {
            front=itr->next->next;
            itrDummy->next=itr->next;
            itr->next=front;
            itrDummy=itrDummy->next;
            itr=itr->next;
        }//rebuliding the original list, and also updating the copied list with real next value
        return dummy->next;
    }
};