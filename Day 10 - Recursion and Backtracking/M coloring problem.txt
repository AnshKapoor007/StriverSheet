bool isValid(vector<vector<int>>& graph, vector<int>& color, int n, int node, int currCol) {
    for(auto connNode: graph[node]) {
        if(color[connNode]==currCol) return false;
    }
    return true;
}
bool graphColoringHelp(vector<vector<int>>& graph, vector<int>& color, int m, int n, int node) {
    if(n==node) return true;
    for(int i=1; i<=m; i++) {
        if(isValid(graph, color, n, node, i)) {
            color[node]=i;
            if(graphColoringHelp(graph, color, m, n, node+1)) return true;
            color[node]=0;
        }
    }
    return false;
}
string graphColoring(vector<vector<int>>& mat, int m) {
    int n=mat.size();
    vector<vector<int>> graph(n);
    vector<int> color(n, -1);
    for(int i=0; i<n; i++) {
        for(int j=0; j<n; j++) {
            if(mat[i][j]==1) {
                graph[i].push_back(j);
                graph[j].push_back(i);
            }
        }
    }
    return graphColoringHelp(graph, color, m, n, 0)?"YES":"NO";
}