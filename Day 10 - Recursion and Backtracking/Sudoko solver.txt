class Solution {
public:
    bool isValid(vector<vector<char>>& board, int row, int col, char num) {
        for(int i=0; i<9; i++) {
            if(board[row][i]==num)
                return false;
        }
        for(int i=0; i<9; i++) {
            if(board[i][col]==num)
                return false;
        }
        int blockStartRow=(row/3)*3;
        int blockStartCol=(col/3)*3;

        for(int i=blockStartRow; i<blockStartRow+3; i++) {
            for(int j=blockStartCol; j<blockStartCol+3; j++) {
                if(board[i][j]==num)
                    return false;
            }
        }
        return true;
    }
    
    bool solveSudokuHelp(vector<vector<char>>& board, int row, int col) {
        if(row==9) return true;
        if(col==9) return solveSudokuHelp(board, row+1, 0);
        if(board[row][col]!='.') return solveSudokuHelp(board, row, col+1);
        for(char i='1'; i<='9'; i++) {
            if(isValid(board, row, col, i)) {
                board[row][col]=i;
                if(solveSudokuHelp(board, row, col+1)) return true;
                board[row][col]='.';
            }
        }
        return false;
    }
    
    void solveSudoku(vector<vector<char>>& board) {
        solveSudokuHelp(board, 0, 0);
    }
};