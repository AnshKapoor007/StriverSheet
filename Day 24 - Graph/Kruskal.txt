struct node {
	int u;
	int v;
	int wt;
	node(int first, int second, int weight) {
		u=first;
		v=second;
		wt=weight;
	}
};

bool comp(node a, node b) {
	return a.wt<b.wt;
}

int findPar(int u, vector<int>& parent) {
	if(u==parent[u]) return u;
	return findPar(parent[u], parent);
}

void unite(int u, int v, vector<int>& parent, vector<int>& rank) {
	u=findPar(u, parent);
	v=findPar(v, parent);
	if(rank[u]<rank[v]) {
		parent[u]=v;
	}
	else if(rank[v]<rank[u]) {
		parent[v]=u;
	}
	else {
		parent[v]=u;
		rank[u]++;
	}
}

int kruskalMST(int n, vector<vector<int>>& edges) {
	vector<node> graph;
	for(auto edge: edges)
		graph.push_back(node(edge[0], edge[1], edge[2]));
	sort(graph.begin(), graph.end(), comp);
	vector<int> parent(n+1);
	vector<int> rank(n+1, 0);
	for(int i=1; i<=n; i++) parent[i]=i;
	int cost=0;
	for(auto it: graph) {
		if(findPar(it.v, parent)!=findPar(it.u, parent)) {
			cost+=it.wt;
			unite(it.u, it.v, parent, rank);
		}
	}
	return cost;
}
