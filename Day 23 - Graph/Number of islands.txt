class Solution {
public:
    bool isValid(int i, int j, int n, int m) {
        if(i<0 || j<0 || i>=n || j>=m) return false;
        return true;
    }
    
    void dfs(int i, int j, int n, int m, vector<vector<char>>& grid) {
        grid[i][j]='2';
        if(isValid(i+1, j, n, m) && grid[i+1][j]=='1')
            dfs(i+1, j, n, m, grid);
        if(isValid(i-1, j, n, m) && grid[i-1][j]=='1')
            dfs(i-1, j, n, m, grid);
        if(isValid(i, j+1, n, m) && grid[i][j+1]=='1')
            dfs(i, j+1, n, m, grid);
        if(isValid(i, j-1, n, m) && grid[i][j-1]=='1')
            dfs(i, j-1, n, m, grid);
    }

    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int isLands=0;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j]=='1') {
                    dfs(i, j, n, m, grid);
                    isLands++;
                }
            }
        }
        return isLands;
    }
};