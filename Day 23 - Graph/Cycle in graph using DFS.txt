#include<bits/stdc++.h>
bool dfs(int curr, int par, vector<bool>& visited, unordered_map<int, vector<int>>& graph) {
    visited[curr]=true;
    for(int neighbour: graph[curr]) {
        if(!visited[neighbour]) {
            if(dfs(neighbour, curr, visited, graph)) return true;
        }
        else if(neighbour!=par) {
            return true;
        }

    }
    return false;
}

string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    vector<bool> visited(n+1, false);
    unordered_map<int, vector<int>> graph;
    for(auto edge: edges) {
        graph[edge[0]].push_back(edge[1]);
        graph[edge[1]].push_back(edge[0]);
    }
    for(int i=1; i<=n; i++) {
        if(!visited[i]) {
            if(dfs(i, -1, visited, graph)) return "Yes";
        }
    }
    return "No";
}
