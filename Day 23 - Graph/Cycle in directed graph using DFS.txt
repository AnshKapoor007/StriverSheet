class Solution {
public:
    bool isCycle(int idx, unordered_map<int, vector<int>>& graph, vector<bool>& visited, vector<bool>& dfsvisited) {
        visited[idx]=true;
        dfsvisited[idx]=true;
        for(int neighbour: graph[idx]) {
            if(!visited[neighbour]) {
                if(isCycle(neighbour, graph, visited, dfsvisited))
                    return true;
            }
            else if(dfsvisited[neighbour]) return true;
        }
        dfsvisited[idx]=false;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<bool> visited(numCourses, false);
        vector<bool> dfsvisited(numCourses, false);
        unordered_map<int, vector<int>> graph;
        for(int i=0; i<prerequisites.size(); i++)
            graph[prerequisites[i][0]].push_back(prerequisites[i][1]);
        for(int i=0; i<numCourses; i++) {
            if(isCycle(i, graph, visited, dfsvisited))
                return false;
        }
        return true;
    }
};