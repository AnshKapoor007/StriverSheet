/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTreeHelp(vector<int>& preorder, int prestart, int preend, vector<int>& inorder, int instart, int inend, map<int, int>& inmap) {
        if(prestart>preend || instart>inend) return NULL;
        TreeNode* root=new TreeNode(preorder[prestart]);
        int rootIdx=inmap[preorder[prestart]];
        int noe=rootIdx-instart;
        root->left=buildTreeHelp(preorder, prestart+1, prestart+noe, inorder, instart, instart+noe-1, inmap);
        root->right=buildTreeHelp(preorder, prestart+noe+1, preend, inorder, instart+noe+1, inend, inmap);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int, int> inmap;
        int n=inorder.size();
        for(int i=0; i<n; i++) inmap[inorder[i]]=i;
        return buildTreeHelp(preorder, 0, n-1, inorder, 0, n-1, inmap);
    }
};