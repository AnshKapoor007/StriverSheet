class Node {
    public:
    int key;
    int val;
    Node*next;
    Node*prev;
    Node(int key,int val){
        this->key=key;
        this->val=val;
        next=NULL;
        prev=NULL;
    }
};

class LRUCache {
public:
    unordered_map<int, Node*> m;
    Node* head=new Node(-1,-1);
    Node* tail=new Node(-1,-1);
    int size;

    LRUCache(int capacity) {
        size=capacity;
        head->next=tail;
        tail->prev=head;
    }

    void deleteNode(Node* p) {
       Node* pre=p->prev;
       Node* nex=p->next;
       pre->next=nex;
       nex->prev=pre;
    }

    void addNode(Node* newnode) {
        Node* temp=head->next;
        newnode->next=temp;
        newnode->prev=head;
        head->next=newnode;
        temp->prev=newnode;
    }
    
    int get(int key) {
        if(m.find(key)==m.end())
            return -1;
        Node* p=m[key];
        int res=p->val;
        m.erase(key);
        deleteNode(p);
        addNode(p);
        m[key]=head->next;
        return res;
    }
    
    void put(int key, int value) {
       if(m.find(key)!=m.end()) {
            Node* c=m[key];
            m.erase(key);
            deleteNode(c);
        }
        if(m.size()==size){
            m.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        addNode(new Node(key, value));
        m[key]=head->next;
    }
};
/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */