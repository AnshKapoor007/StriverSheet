class Solution {
public:
    bool isValid(int i, int j, int m, int n) {
        if(i<0 || j<0 || i>=m || j>=n) return false;
        return true;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        queue<vector<int>> q;
        vector<vector<int>> dr={{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int max_time=0;
        int m=grid.size();
        int n=grid[0].size();
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++)
                if(grid[i][j]==2) q.push({i, j, 0});
        }
        while(!q.empty()) {
            auto curr=q.front();
            q.pop();
            for(int i=0; i<4; i++) {
                int iNext=curr[0]+dr[i][0];
                int jNext=curr[1]+dr[i][1];
                if(isValid(iNext, jNext, m, n) && grid[iNext][jNext]==1) {
                    grid[iNext][jNext]=2;
                    q.push({iNext, jNext, curr[2]+1});
                    max_time=max(max_time, curr[2]+1);
                }
            }
        }
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++)
                if(grid[i][j]==1) return -1;
        }
        return max_time;
    }
};