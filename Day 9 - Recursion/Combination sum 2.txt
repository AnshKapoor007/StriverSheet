class Solution {
public:
    void combinationSumHelp(int idx, vector<int>& candidates, int target, int n, vector<int>& subArr, vector<vector<int>>& ans) {
        if(target==0) {
            ans.push_back(subArr);
            return;
        }
        for(int i=idx; i<n; i++) {
            if(candidates[i]>target) break;
            if(i!=idx && candidates[i]==candidates[i-1]) continue;
            subArr.push_back(candidates[i]);
            combinationSumHelp(i+1, candidates, target-candidates[i], n, subArr, ans);
            subArr.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> subArr;
        sort(candidates.begin(), candidates.end());
        combinationSumHelp(0, candidates, target, candidates.size(), subArr, ans);
        return ans;
    }
};