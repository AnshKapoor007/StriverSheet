class MedianFinder {
public:
    priority_queue<int> maxHeap; //for every element shorter than the current element
    priority_queue<int, vector<int>, greater<int>> minHeap; //for every element shorter than the current element
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(maxHeap.empty() || maxHeap.top()>=num)
            maxHeap.push(num);
        else minHeap.push(num);
        if(maxHeap.size()>minHeap.size()+1) {
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
        else if(minHeap.size()>maxHeap.size()) {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }
    
    double findMedian() {
        if(minHeap.size()==maxHeap.size())
            return (static_cast<double>(maxHeap.top()+minHeap.top()))/2;
        return maxHeap.top();
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */