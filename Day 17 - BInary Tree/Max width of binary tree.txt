/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*, int>> q;
        if(root==NULL) return 0;
        int ans=0;
        q.push({root, 0});
        while(!q.empty()) {
            int len=q.size();
            int mini=q.front().second;
            int f, l;
            for(int i=0; i<len; i++) {
                int currIdx=q.front().second-mini;
                TreeNode* curr=q.front().first;
                q.pop();
                if(i==0) f=currIdx;
                if(i==len-1) l=currIdx;
                if(curr->left!=NULL)
                    q.push({curr->left, 2LL*currIdx+1});
                if(curr->right!=NULL)
                    q.push({curr->right, 2LL*currIdx+2});
            }
            ans=max(ans, l-f+1);
        }
        
        return ans;
    }
};