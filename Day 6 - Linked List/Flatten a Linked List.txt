#include <algorithm>
/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* flattenLinkedList(Node* head) 
{
	vector<int> newList;
	while(head!=NULL) {
		Node* childHead=head;
		while(childHead!=NULL) {
			newList.push_back(childHead->data);
			childHead=childHead->child;
		}
		head=head->next;
	}
	int n=newList.size();
	sort(newList.begin(), newList.end());
	Node* ans=new Node();
	Node* temp=ans;
	for(int i=0; i<n; i++) {
		temp->data=newList[i];
		if(i!=n-1) temp->next=new Node();
		temp=temp->next;
	}
	while(ans!=NULL) {
		cout<<ans->data<<'\t';
		ans=ans->next;
	}
	return ans;
}
