/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
    string serialize(TreeNode* root) {
        if(root==NULL) return "";
        string ans="";
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            TreeNode* curr=q.front();
            q.pop();
            if(curr==NULL) ans+="#,";
            else {
                ans+=to_string(curr->val);
                ans+=',';
                q.push(curr->left);
                q.push(curr->right);
            }
        }
        return ans;
    }

    TreeNode* deserialize(string data) {
        if(data.size()==0) return NULL;
        stringstream s(data);
        string str;
        getline(s, str, ',');
        TreeNode* root=new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            TreeNode* curr=q.front();
            q.pop();
            getline(s, str, ',');
            if(str!="#") {
                TreeNode* newNode=new TreeNode(stoi(str));
                curr->left=newNode;
                q.push(curr->left);
            }
            else {
                curr->left=NULL;
            }
            getline(s, str, ',');
            if(str!="#") {
                TreeNode* newNode=new TreeNode(stoi(str));
                curr->right=newNode;
                q.push(curr->right);
            }
            else {
                curr->right=NULL;
            }
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));